(dp1
S'output'
p2
S''
sS'layer'
p3
S'G:\\studies\\SSAD\\Mini Project\\web2py_win\\web2py\\applications\\try/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\ndef index():\n    \n    #response.title = \'IIIT Hyderabad\'\n    #response.subtitle = \'PGSSP\'\n    #response.menu = None\n    #response.menu_edit = None\n    #r = db(db.details.personid == auth.user.id).select() if auth.user else None\n    #details = r[0] if r else None\n    #return dict(details=details)\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    return dict(p=db(db.songs_database.id>0).select())\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[adb.notifications.insert(user_id=ss[0].uploaded_by, value=\'%(p)s commented \\"%(v)s\\" on %(o)s \'%{\'p\':auth.user.first_name,\'v\':request.vars.comment,\'o\':ss[0].song_name},song_id=ss[0].id)pp]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n@auth.requires_login()\ndef upload_box():\n    form=SQLFORM(db.songs_database)\n    if form.accepts(request.vars,session):\n        response.flash=\'New Song uploaded\'\n    return dict(upload=form)\n\n@auth.requires_login()\ndef search_box():\n    form=FORM(TABLE(TR(\'Find\',INPUT(_type=\'string\',_name=\'Find\',requires=IS_NOT_EMPTY())),TR(\'\',INPUT(_type=\'submit\',_value=\'search\'))))\n    d=[]  \n    if form.accepts(request.vars,session):\n         s=\'\'\n         p=request.vars.Find\n         i=0     \n         for i in range(0,len(p)+1):                     \n               if(len(p)==i or p[i]==\' \'):\n                r=db((s==db.songs_database.song_name) | (s==db.songs_database.artist) | (s==db.songs_database.Genre) | (s==db.songs_database.album_name) ).select()\n                if len(r)!=0:\n                  o=0                \n                  for o in range(0,len(r)):\n                    if r[o].id not in d: \n                      d+=[r[o].id]\n                s=\'\'\n               else:\n                  s=s+p[i]   \n         if(len(d)==0):\n            response.flash=\'sorry no result\'          \n         else:  \n          response.flash=\'search complete\'            \n    return dict(form=form,d=d,h=(db(db.songs_database.id>0).select()))\n\n@auth.requires_login()\ndef list_songs():\n    u=request.args(0)\n    if u==None: u=0 \n    return dict(songs=db(db.songs_database.id>0).select(),u=int(u))\n\ndef view_song():\n    image_id = request.args(0) or redirect(URL(r=request,f=\'index\'))\n   # if image_id>(db(db.songs_database.id>0).count()):\n    #        redirect(URL(r=request,f=\'index\'))\n    form=SQLFORM(db.comments)\n    db.comments.song_id.default = image_id\n    s=db(db.comments.song_id==image_id).select()\n    so=db(db.comments.song_id==image_id).count()\n    u=db(db.songs_database.id==image_id).select()\n    if (form.accepts(request.vars,session)):\n        ss=db(db.songs_database.id==image_id).select()\n        print (ss[0].uploaded_by) , int(ss[0].uploaded_by)\n        if (int(auth.user.id) != int(ss[0].uploaded_by)): \n           print auth.user.id , ss[0].uploaded_by\n           db.notifications.insert(user_id=ss[0].uploaded_by, value=\'%(p)s commented \\"%(v)s\\" on %(o)s \'%{\'p\':auth.user.first_name,\'v\':request.vars.comment,\'o\':ss[0].song_name},song_id=ss[0].id)\n    return dict(u=u,so=so,songs=db(db.songs_database.id==image_id).select(),form=form,s=s)\n    \n@auth.requires_login()\ndef create_playlist():\n       name=SQLFORM(db.new_playlist)\n       if(name.accepts(request.vars,session)):\n           #    db.playlist.insert(playlist_id=request.vars.id)\n               session.flash=\'new playlist created\'\n               redirect(URL(r=request,f=\'select_songs\',args=name.vars.id))\n       return dict(name=name)\n\n@auth.requires_login()\ndef select_songs(): \n       i=request.args(0) \n       return dict(i=i,songs=db(db.songs_database.id>0).select())\n       \n@auth.requires_login()\ndef play():\n    return dict(l=db(db.new_playlist.user_id==auth.user.id).select()) \n\n@auth.requires_login()    \ndef del_play():\n     db(db.new_playlist.id==request.args(0)).delete()\n     db(db.playlist.playlist_id==request.args(0)).delete()\n     redirect(URL(r=request,f=\'play\'))\n     return dict(a=1)\n     \n@auth.requires_login()\ndef playlist():\n    return dict(play=db(db.playlist.playlist_id==request.args(0)).select())\n\n@auth.requires_login()\ndef add():\n    a=request.args(0)\n    b=request.args(1)\n    d=db(db.playlist.playlist_id==a).select()\n    for i in d:\n        print  i.song_name, b\n        if i.song_name==b :\n           session.flash="already present"\n           redirect(URL(r=request,f=\'select_songs\',args=a))                \n    db.playlist.insert(playlist_id=request.args(0),song_name=request.args(1),song_id=request.args(2))\n    redirect(URL(r=request,f=\'select_songs\',args=a))\n    return dict(a=a,b=b)\n\n@auth.requires_login()\ndef del_play_song():\n    db(db.playlist.playlist_id==request.args(0) and db.playlist.song_name==request.args(1)).delete()\n    redirect(URL(r=request,f=\'playlist\',args=request.args(0)))\n    return dict(a=1)   \n     \n@auth.requires_login()\ndef edit():       \n    row = db.songs_database[request.args(0)]\n    form = SQLFORM(db.songs_database,row,deletable=True)\n    if form.accepts(request.vars, session):\n        response.flash = \'record updated\'\n    return dict(form=form)\n    \n         # db(db.songs_database.id > 0).count()\n@auth.requires_login()\ndef notify():\n    p=db(db.notifications.user_id==auth.user.id).select() \n    return dict(p=p)\n    \n@auth.requires_login()    \ndef del_notification():\n   if db(db.notifications.id==request.args(0)).delete():\n        response.flash =\'song deleted\'\n        redirect(URL(r=request,f=\'notify\'))\n   return dict(a=1) \n       \n@auth.requires_login()\ndef all():\n    p=request.args(0)\n    u=request.args(1)\n    s=db(db.comments.song_id==p).select()\n    return dict(s=s,p=p,u=int(u))\n\ndef last_uploads():\n    return dict(p=db(db.songs_database.id>0).select())\n\n@auth.requires_login()    \ndef my_uploads():\n    if request.args(0)==None: \n        u=0\n    else: u=int(request.args(0))\n    print u\n    return dict(p=db(db.songs_database.uploaded_by==auth.user.id).select(),u=u)\n\n@auth.requires_login()\ndef del_my():\n     db(db.songs_database.id==request.args(0)).delete()\n     redirect(URL(r=request,f=\'my_uploads\'))\n     return dict(a=1)\n@auth.requires_login()\ndef down():\n #print "yaaaaa" , request.args(1)\n d=db(db.songs_database.id==request.args(1)).select()\n db(db.songs_database.id==request.args(1)).update(no_down=d[0].no_down+1)\n redirect(URL(r=request,f=\'download\',args=request.args(0)))\n\n@auth.requires_login()\ndef likes():\n ss=db(db.songs_database.id==request.args(0)).select()\n if (int(auth.user.id) != int(ss[0].uploaded_by)):\n    db.notifications.insert(user_id=ss[0].uploaded_by, value=\'%(p)s likes "%(o)s" \'%{\'p\':auth.user.first_name,\'o\':ss[0].song_name},song_id=ss[0].id)\n    \n redirect(URL(r=request,f=\'view_song\',args=request.args(0)))\n return dict(a=1)\n\nresponse._vars=response._caller(all)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 178, in restricted\n  File "G:\\studies\\SSAD\\Mini Project\\web2py_win\\web2py\\applications\\try/controllers/default.py", line 225, in <module>\n  File "gluon/globals.py", line 96, in <lambda>\n  File "gluon/tools.py", line 2219, in f\n  File "G:\\studies\\SSAD\\Mini Project\\web2py_win\\web2py\\applications\\try/controllers/default.py", line 191, in all\nTypeError: int() argument must be a string or a number, not \'NoneType\'\n'
p8
s.