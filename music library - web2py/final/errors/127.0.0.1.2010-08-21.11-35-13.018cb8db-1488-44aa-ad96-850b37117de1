(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/piyush/Downloads/web2py/applications/u_tunes2/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = T(\'Welcome to web2py\')\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\n@auth.requires_login()\ndef upload_box():\n    form=SQLFORM(db.songs_database)\n    if form.accepts(request.vars,session):\n        response.flash=\'NEW Song uploaded\'\n    return dict(upload=form)\n\n@auth.requires_login()\ndef search_box():\n    form=FORM(TABLE(TR(\'Find\',INPUT(_type=\'string\',_name=\'Find\',requires=IS_NOT_EMPTY())),TR(\'\',INPUT(_type=\'submit\',_value=\'SEARcH\')))) \n    d=[]  \n    if form.accepts(request.vars,session):\n         s=\'\'\n         p=request.vars.Find\n         i=0     \n         for i in range(0,len(p)+1):                     \n               if(len(p)==i or p[i]==\' \'):\n                r=db((s==db.songs_database.song_name) | (s==db.songs_database.artist) | (s==db.songs_database.Genre) | (s==db.songs_database.album_name) ).select()\n                if len(r)!=0:\n                  o=0                \n                  for o in range(0,len(r)):\n                    if r[o].id not in d: \n                      d+=[r[o].id]\n                s=\'\'\n               else:\n                  s=s+p[i]   \n         if(len(d)==0):\n            response.flash=\'sorry no result\'          \n         else:  \n          response.flash=\'search complete\'            \n    return dict(form=form,d=d,h=(db(db.songs_database.id>0).select()))\n\n@auth.requires_login()\ndef list_songs():\n    return dict(songs=db(db.songs_database.id>0).select())\n\n@auth.requires_login()\ndef view_song():\n    image_id = request.args(0) or redirect(URL(r=request,f=\'index\'))\n   # if image_id>(db(db.songs_database.id>0).count()):\n    #        redirect(URL(r=request,f=\'index\'))\n    form=SQLFORM(db.comments)\n    db.comments.song_id.default = image_id\n    s=db(db.comments.song_id==image_id).select()\n    if(form.accepts(request.vars,session)):\n        ss=db(db.songs_database.id==image_id).select()\n        db.notifications.insert(user_id=ss[0].uploaded_by,value=\'%(p)s commented "%(v)s" on %(o)s \' %{\'p\':auth.user.first_name,\'v\':request.vars.comment,\'o\':ss[0].song_name} )\n        response.flash="Thank u"\n    return dict(songs=db(db.songs_database.id==image_id).select(),form=form,s=s)\n    \n@auth.requires_login()\ndef create_playlist():\n       name=SQLFORM(db.new_playlist)\n       if(name.accepts(request.vars,session)):\n               session.flash=\'new playlist created\'\n               redirect(URL(r=request,f=\'select_songs\'))\n       return dict(name=name)\n\n@auth.requires_login()\ndef select_songs():\n       return dict(songs=db(db.songs_database.id>0).select())\n\n@auth.requires_login()\ndef edit():       \n    row = db.songs_database[request.args(0)]\n    form = SQLFORM(db.songs_database,row,deletable=True)\n    if form.accepts(request.vars, session):\n        response.flash = \'record updated\'\n    return dict(form=form)\n    \n         # db(db.songs_database.id > 0).count()\n\nresponse._vars=response._caller(view_song)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/piyush/Downloads/web2py/gluon/restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "/home/piyush/Downloads/web2py/applications/u_tunes2/controllers/default.py", line 127, in <module>\n  File "/home/piyush/Downloads/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/piyush/Downloads/web2py/gluon/tools.py", line 1910, in f\n    return action(*a, **b)\n  File "/home/piyush/Downloads/web2py/applications/u_tunes2/controllers/default.py", line 101, in view_song\n    db.notifications.insert(user_id=ss[0].uploaded_by,value=\'%(p)s commented "%(v)s" on %(o)s \' %{\'p\':auth.user.first_name,\'v\':request.vars.comment,\'o\':ss[0].song_name} )\n  File "/home/piyush/Downloads/web2py/gluon/sql.py", line 1924, in insert\n    query = self._insert(**fields)\n  File "/home/piyush/Downloads/web2py/gluon/sql.py", line 1905, in _insert\n    vs.append(sql_represent(value, ft, fd, self._db._db_codec))\n  File "/home/piyush/Downloads/web2py/gluon/sql.py", line 502, in sql_represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'piyush\'\n'
p8
s.