(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/piyush/Downloads/web2py/applications/try/models/db.py'
p4
sS'code'
p5
S"# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL('gae')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client())\nelse:                                         # else use a normal relational database\n    db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n\nfrom gluon.tools import *\nauth=Auth(globals(),db)              # authentication/authorization\n\n# mail=Mail()                                  # mailer\n# mail.settings.server='smtp.gmail.com:587'    # your SMTP server\n# mail.settings.sender='you@gmail.com'         # your email\n# mail.settings.login='username:password'      # your credentials or None\n\n#auth.settings.hmac_key='sha512:2fddc896-8eaa-4d40-9ae6-425259dd0695'\n\n#auth.settings.table_user = db.define_table('auth_user',\n       # db.Field('first_name', 'string', length=128, default=''),\n      #  db.Field('last_name', 'string', length=128, default='', requires = IS_NOT_EMPTY()),\n     #   db.Field('email', 'string', length=128, default=''),\n    #    db.Field('password', 'password', requires = CRYPT(), readable=False),\n   #     db.Field('registration_key', 'string', length=128, writable=False, readable=False, default=''),\n  #      migrate=False)\n##t = auth.settings.table_user\n#t.email.requires = [IS_EMAIL(), IS_NOT_IN_DB(db, 'auth_user.email')]\n\n##auth.define_tables()                 # creates all needed tables\n\ncrud=Crud(globals(),db)              # for CRUD helpers using auth\nservice=Service(globals())           # for json, xml, jsonrpc, xmlrpc, amfrpc\ncrud.settings.auth=auth                      # enforces authorization on crud\n##mail=Mail()         \n##mail.settings.server='mail.iiit.ac.in:25'      # your SMTP server\n##mail.settings.sender='abhishek.grover@students.iiit.ac.in' # your email\n         # your email\n# mail.settings.login='username:password'      # your credentials or None\n##auth.settings.mailer=mail                    # for user email verification\n##auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n##auth.messages.verify_email = 'Click on the link http://web.iiit.ac.in/~piyush'+'/%(key)s to verify your email'\n# auth.settings.reset_password_requires_verification = True\n# auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['reset_password'])+'/%(key)s to reset your password'\n##auth.settings.create_user_groups = False\n# auth.settings.mailer=mail          # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['verify_email'])+'/%(key)s to verify your email'\n# auth.settings.reset_password_requires_verification = True\n# auth.messages.reset_password = 'Click on the link http://'+request.env.http_host+URL(r=request,c='default',f='user',args=['reset_password'])+'/%(key)s to reset your password'\n\n# crud.settings.auth=auth            # enforces authorization on crud\n\n## more options discussed in gluon/tools.py\n#########################################################################\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\nimport datetime\n     \ndb.define_table(\n  'songs_database',\n  Field('song_name','string',requires=[IS_NOT_EMPTY(),IS_NOT_IN_DB(db,'songs_database.song_name')]),\n  Field('upload_song','upload',requires=IS_NOT_EMPTY()),\n  Field('upload_song_cover','upload'),\n  Field('album_name','string',default='unknown'),\n  Field('artist','string',default='unknown'),\n  Field('Genre'),\n  Field('language','string',default='unknown',requires=IS_NOT_EMPTY()), \n  Field('uploaded_by','integer'),\n  Field('year','integer',requires=IS_INT_IN_RANGE(1800,2010)),\n  Field('no_down','integer',default=0,writable=False)\n  #rating plugin,likes plugin ,no' sdown, listen\n  )\n\ndb.songs_database.uploaded_by.default=auth.user.id if auth.user else -1\ndb.songs_database.uploaded_by.writable=db.songs_database.uploaded_by.readable=False\ndb.songs_database.Genre.requires=IS_IN_SET(['Rock','Jazz','Pop','Bollywood','Classic','Quwalli','other'])  \n\ndb.define_table('comments',Field('user_name','string',requires=IS_NOT_EMPTY(),default=(auth.user.first_name if auth.user else 0),readable=False,writable=False),Field('song_id','integer',requires=IS_NOT_EMPTY(),readable=False,writable=False),Field('comment','text',requires=IS_NOT_EMPTY()),Field('time','datetime',default=request.now,writable=False))\n\n\ndb.define_table(\n'like',Field('user_id','integer',requires=IS_NOT_EMPTY(),default=(auth.user.id if auth.user else -1),writable=False),\nField('song_name','string',requires=[IS_NOT_EMPTY(),IS_IN_DB(db,'songs_database.song_name')])\n)\n\n\ndb.define_table(\n'notifications',Field('user_id','integer',db.auth_user,requires=IS_NOT_EMPTY()),  #jisko notiication  jani hain \nField('value','text',requires=IS_NOT_EMPTY())\n)\n\n\n\ndb.define_table(\n'new_playlist',Field('user_id',db.auth_user,requires=IS_NOT_EMPTY(),default=auth.user.id  if auth.user else -1,readable=False,writable=False),\nField('playlist_name','string',requires=IS_NOT_EMPTY()))\n\n\ndb.define_table(\n'playlist',Field('playlist_id',db.new_playlist), ##value=arg(0) implemented in controller\nField('song_name',db.songs_database))\n#db.define_table(\n#'autosearch',Fiel\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/piyush/Downloads/web2py/gluon/restricted.py", line 178, in restricted\n    exec ccode in environment\n  File "/home/piyush/Downloads/web2py/applications/try/models/db.py", line 124, in <module>\n    \'notifications\',Field(\'user_id\',\'integer\',db.auth_user,requires=IS_NOT_EMPTY()),  #jisko notiication  jani hain\n  File "/home/piyush/Downloads/web2py/gluon/sql.py", line 1324, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'auth_user\'\n'
p8
s.